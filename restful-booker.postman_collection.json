{
	"info": {
		"_postman_id": "01e8ca33-3aac-44c7-ac05-23e47220c1d9",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22595821"
	},
	"item": [
		{
			"name": "Create a booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.bookingid)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//date\r",
							"const moment = require(\"moment\")\r",
							"const today = moment();\r",
							"/*\r",
							"console.log(today.format(\"YYYY-MM-DD\"))\r",
							"console.log(today.add(1, \"d\").format(\"YYYY-MM-DD\"))\r",
							"console.log(today.add(1, \"M\").format(\"YYYY-MM-DD\"))\r",
							"console.log(today.add(1, \"Y\").format(\"YYYY-MM-DD\"))\r",
							"*/\r",
							"\r",
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"var checkIn = today.add(1, \"d\").format(\"YYYY-MM-DD\")\r",
							"var checkOut = today.add(3, \"d\").format(\"YYYY-MM-DD\")\r",
							"\r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"pm.environment.set(\"lastName\", lastName)\r",
							"pm.environment.set(\"totalPrice\", totalPrice)\r",
							"pm.environment.set(\"depositPaid\", depositPaid)\r",
							"pm.environment.set(\"checkIn\", checkIn)\r",
							"pm.environment.set(\"checkOut\", checkOut)\r",
							"//console.log(firstName)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{totalPrice}},\r\n\t\"depositpaid\" : {{depositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkIn}}\",\r\n    \t\"checkout\" : \"{{checkOut}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a booking by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"if(code==200 || code==201){\r",
							"\tpm.test(\"First Name\", function(){\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Last Name\", function(){\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))   \r",
							"    })\r",
							"\r",
							"    //string to int using parseInt\r",
							"    pm.test(\"Total Price\", function(){\r",
							"        pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"totalPrice\")))   \r",
							"    })\r",
							"\r",
							"    //boolean data convert\r",
							"    pm.test(\"Deposit Paid\", function(){\r",
							"        pm.expect(jsonData.depositpaid).to.eql(JSON.parse(pm.environment.get(\"depositPaid\")))   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Check In Date\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkIn\"))   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Check Out Date\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkOut\"))   \r",
							"    })\r",
							"}\r",
							"else if(code==401){\r",
							"\tpm.test(\"Bad Request\")\r",
							"}\r",
							"else{\r",
							"\tpm.test(\"Not Found\")\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token)\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token property is present in the response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('token');\r",
							"});\r",
							"\r",
							"pm.test(\"Token property is a non-empty string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.be.a('string').and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Token is saved in the environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a booking by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"firstName\", jsonData.firstname)\r",
							"pm.environment.set(\"lastName\", jsonData.lastname)\r",
							"pm.environment.set(\"totalPrice\", jsonData.totalprice)\r",
							"pm.environment.set(\"depositPaid\", jsonData.depositpaid)\r",
							"pm.environment.set(\"checkIn\", jsonData.bookingdates.checkin)\r",
							"pm.environment.set(\"checkOut\", jsonData.bookingdates.checkout)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Asif\",\r\n    \"lastname\": \"Shahriar\",\r\n    \"totalprice\": 1000,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkIn}}\",\r\n        \"checkout\": \"{{checkOut}}\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by id after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"if(code==200 || code==201){\r",
							"\tpm.test(\"First Name\", function(){\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Last Name\", function(){\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))   \r",
							"    })\r",
							"\r",
							"    //string to int using parseInt\r",
							"    pm.test(\"Total Price\", function(){\r",
							"        pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"totalPrice\")))   \r",
							"    })\r",
							"\r",
							"    //boolean data convert\r",
							"    pm.test(\"Deposit Paid\", function(){\r",
							"        pm.expect(jsonData.depositpaid).to.eql(JSON.parse(pm.environment.get(\"depositPaid\")))   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Check In Date\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkIn\"))   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Check Out Date\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkOut\"))   \r",
							"    })\r",
							"}\r",
							"else if(code==401){\r",
							"\tpm.test(\"Bad Request\")\r",
							"}\r",
							"else{\r",
							"\tpm.test(\"Not Found\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a booking by id",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}